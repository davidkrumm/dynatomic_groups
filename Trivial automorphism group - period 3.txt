
//// Computing the Galois group of Phi_3 and its lattice of subgroups.

F<t> := PolynomialRing(Rationals());
_<x> := PolynomialRing(F);

Phi3 := x^6 + (-t + 6)*x^5 + (t^2 + 2*t + 36)*x^4 + (5*t^2 + 21*t + 106)*x^3 + (10*t^2 + 46*t + 156)*x^2 + (9*t^2 + 40*t + 108)*x + 3*t^2 + 12*t + 28;

// Discriminant(Phi3) eq -27*(t + 6)^10*(t^2 + 3*t + 9)^2;

G,_,S := GaloisGroup(Phi3);

Gsubs := SubgroupLattice(G); // The poset of conjugacy classes of subgroups of G

//// Checking that G is isomorphic to the appropriate wreath product.

S6 := Sym(6);
pi := S6 ! [{@ 1,2,3 @}, {@ 4,5,6 @}];
W := Centralizer(S6, pi);
W eq WreathProduct(CyclicGroup(3),Sym(2));
IsConjugate(S6,G,W);

/*

Output:

true
true

*/


//// There are three maximal subgroups of G up to conjugacy.

Gmax := MaximalSubgroups(Gsubs ! G);
#Gmax;

/*

Output:

3

*/


//// Labeling the maximal subgroups of G.

sigma := S6 ! [{@ 1,2,3 @},{@ 4,6,5 @}];

for i in Gmax do
m := Group(i);
if IsConjugate(G,m,sub<S6|[S6![{@ 1,2,3 @}],pi]>) then
A := m;
elif IsConjugate(G,m,sub<S6|[S6![{@ 1,5,2,6,3,4 @}],pi]>) then
B := m;
elif IsConjugate(G,m,sub<S6|[S6![{@ 1,6 @},{@ 2,4 @},{@ 3,5 @}],sigma]>) then
C := m;
end if;
end for;

//// There are two maximal subgroups of C up to conjugacy in G.

Cmax := MaximalSubgroups(Gsubs ! C);
#Cmax;

/*

Output:

2

*/


//// Labeling the maximal subgroups of C.

for i in Cmax do
m := Group(i);
if IsConjugate(G,m,sub<S6|S6![{@ 1,6 @},{@ 2,4 @},{@ 3,5 @}]>) then
H := m;
elif IsConjugate(G,m,sub<S6|sigma>) then
J := m;
end if;
end for;


//// Checking that H is contained in a G-conjugate of B,
//// and J is contained in a conjugate of A.

Gsubs ! H le Gsubs ! B;
Gsubs ! J le Gsubs ! A;

/*

Output:

true
true

*/


//// Computing defining polynomials of fixed fields.

qA,_ := GaloisSubgroup(S, A);
qB,_ := GaloisSubgroup(S, B);
qC,_ := GaloisSubgroup(S, C);
qH,_ := GaloisSubgroup(S, H);
qJ,_ := GaloisSubgroup(S, J);

/*

For printing the above polynomials:

R := CoefficientRing(qA);
AssignNames(~R,["t"]);
R := Parent(qA);
AssignNames(~R,["x"]);
qA;
qB;
qC;
qH;
qJ;

*/

//// Computing rational roots of discriminants.

Roots(Discriminant(Phi3));
Roots(Discriminant(qA));
Roots(Discriminant(qB));
Roots(Discriminant(qC));
Roots(Discriminant(qH));
Roots(Discriminant(qJ));

/*

Output:

[ <-6, 10> ]
[ <-6, 2> ]
[ <-6, 4>, <-3, 2> ]
[ <-6, 6> ]
[ <-6, 24> ]
[ <-6, 30> ]

*/


//// *** What follows is the proof of Lemma 3.2 in the paper. *** ////


//// Finding all rational points on the curve Y_A.
//// The polynomial q_A is quadratic in x, so set y^2 = disc(qA).

Discriminant(qA) eq -3*(t + 6)^2;


//// Hence every rational point on Y_A has t-coordinate -6.


//// The curve Y_B is elliptic of rank 0.

AA<t,x> := AffineSpace(Rationals(),2);
f := x^3 + (-t^2 - 36*t - 36)*x^2 + (-t^4 + 4*t^3 + 348*t^2 + 576*t)*x + t^6 + 32*t^5 + 272*t^4 + 304*t^3 + 1800*t^2 + 7776*t + 7776;
YB := Curve(AA, f);
XB := ProjectiveClosure(YB);
E, Bmap := EllipticCurve(XB, XB ! [-3,-33,1]);
Rank(E);
CremonaReference(E);

/*

Output:

0 true
27a1

*/


//// Pulling back rational points on E to X_B.

XB_points := BasePoints(Bmap); // Rational points where the map XB --> E is undefined
T, Tmap := TorsionSubgroup(E);
Epts := [Tmap(y): y in T]; // All the rational points on E.
for pt in Epts do
XB_points := XB_points join Points(Pullback(Bmap, pt));
end for;
XB_points;

/*

Output:

{@ (-6 : -48 : 1), (-3 : -15 : 1), (0 : 1 : 0), (-3 : -33 : 1) @}

*/


//// Hence every rational point on Y_B has t-coordinate -6 or -3.

////  Parametrizing the curve Y_C.
////  First we parametrize the projective closure of Y_C.

AA<t,x> := AffineSpace(Rationals(),2);
f := x^3 + (-t^2 - 36*t - 36)*x^2 + (-t^4 + 4*t^3 + 348*t^2 + 576*t)*x + t^6 + 32*t^5 + 264*t^4 + 184*t^3 + 1152*t^2 + 6048*t + 5184;
YC := Curve(AA, f);
XC := ProjectiveClosure(YC);
P1<v,w> := Curve(ProjectiveSpace(Rationals(),1));
Cmap := Parametrization(XC, XC ! [-3/2,-21/4,1], P1);
Cmap := ImproveParametrization(Cmap);
DefiningPolynomials(Cmap); // Components of the map P1 --> XC

/*

Output:

[
    v^5*w + v^4*w^2 - 3*v^3*w^3 - 4*v^2*w^4 - v*w^5,
    -v^6 + 2*v^5*w + 4*v^4*w^2 - 30*v^3*w^3 - 41*v^2*w^4 - 10*v*w^5 + w^6,
    v^4*w^2 + 2*v^3*w^3 + v^2*w^4
]

*/


//// Dehomogenizing, we obtain a parametrization of Y_C.

A1<v> := AffineSpace(Rationals(),1);
eta := (v^3 - 3*v - 1)/(v*(v + 1));
lambda := (-v^6 + 2*v^5 + 4*v^4 - 30*v^3 - 41*v^2 - 10*v + 1)/(v*(v + 1))^2;
Cmap := map<A1->YC | [eta,lambda]>;


//// Checking that the map A1 --> Y_C is invertible,
//// and finding rational points where the inverse is undefined.

bool, Cmap_inverse := IsInvertible(Cmap);
bool;
BasePoints(Cmap_inverse);

/*

Output:

true
{@ (-6, -48) @}

*/


//// Hence every rational point on Y_C different from (-6,-48)
//// is in the image of the parametrization A1 --> Y_C.


//// *** Proof of Proposition 5.1(a) in the paper. *** ////

_<x> := PolynomialRing(Rationals());
r := -3;
Phi3r := x^6 + (-r + 6)*x^5 + (r^2 + 2*r + 36)*x^4 + (5*r^2 + 21*r + 106)*x^3 + (10*r^2 + 46*r + 156)*x^2 + (9*r^2 + 40*r + 108)*x + 3*r^2 + 12*r + 28;
G3r := GaloisGroup(Phi3r);

possible_groups := {W,C,G3r};

{IsTransitive(H): H in possible_groups};

/*

Output:

{ true }

*/


//// *** Proof of Proposition 5.3(a) *** ////

/*
Given the Galois group of a polynomial F with rational coefficients,
this function computes the density of the set of primes p such that 
F has a root in the p-adic field Q_p.
*/


/*

Output:

{ 1/6, 5/18 }

*/
