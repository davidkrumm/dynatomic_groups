/* 
This file contains the code used for calculations in Section 4.1. This includes:
 - Preliminary computations (starting on line 8),
 - Proof of Lemma 4.1 (line 174),
*/ 


//// *** Setup preceding Lemma 4.1 *** ////

//// Computing the Galois group of Phi_4 and its lattice of subgroups.

F<t> := PolynomialRing(Rationals());
_<x> := PolynomialRing(F);

Phi4 := (t^8 - 3*t^7 + t^6)*x^12 + (-15*t^7 + 30*t^6)*x^11 + (3*t^7 + 96*t^6 - 
    102*t^5)*x^10 + (-t^7 - 42*t^6 - 366*t^5)*x^9 + (24*t^6 + 258*t^5 + 
    1059*t^4)*x^8 + (-6*t^6 - 222*t^5 - 996*t^4)*x^7 + (t^6 + 114*t^5 + 1140*t^4
    - 1828*t^3)*x^6 + (-42*t^5 - 924*t^4 + 2388*t^3)*x^5 + (9*t^5 + 564*t^4 - 
    2019*t^3 + 951*t^2)*x^4 + (-t^5 - 240*t^4 + 1093*t^3 - 1018*t^2)*x^3 + 
    (69*t^4 - 387*t^3 + 564*t^2 - 150*t)*x^2 + (-12*t^4 + 81*t^3 - 162*t^2 + 
    90*t)*x + t^4 - 8*t^3 + 21*t^2 - 20*t + 5;

assert Discriminant(Phi4) eq 1037970703125*(t*(t - 4))^66;

G,_,S := GaloisGroup(Phi4);

Gsubs := SubgroupLattice(G); // The poset of conjugacy classes of subgroups of G


//// Identifying G as a subgroup of the appropriate wreath product.

W := WreathProduct(CyclicGroup(4),Sym(3));
S12 := Sym(12);
pi := S12 ! [{@ 1,2,3,4 @},{@ 5,6,7,8 @},{@ 9,10,11,12 @}];
assert W eq Centralizer(S12,pi);

//// Labeling the unique subgroup of W isomorphic to (Z/4Z) x S_3.

for i in SubgroupLattice(W) do
if IsIsomorphic(Group(i),DirectProduct(CyclicGroup(4),Sym(3))) then
i;
V := Group(i);
end if;
end for;

//// The group V is permutation-isomorphic to G.

assert IsConjugate(S12,G,V);


//// Labeling the maximal subgroups of G.

for i in MaximalSubgroups(Gsubs ! G) do
m := Group(i);
if IdentifyGroup(m) eq <12,2> then
A := m; // the cyclic group of order 12
elif IdentifyGroup(m) eq <12,1> then
B := m; // the dicyclic group of order 12
elif IdentifyGroup(m) eq <12,4> then
C := m; // the dihedral group of order 12
elif IdentifyGroup(m) eq <8,2> then
D := m; // the direct product of Z/4Z and Z/2Z
end if;
end for;


//// Labeling the maximal subgroups of A.

for i in MaximalSubgroups(Gsubs ! A) do
m := Group(i);
if Order(m) eq 6 then
H := m;
elif Order(m) eq 4 then
M := m;
end if;
end for;


//// Labeling two maximal subgroups of D.

for i in MaximalSubgroups(Gsubs ! D) do
m := Group(i);
if IdentifyGroup(m) eq <4,2> then
K := m; // the Klein four-group
elif IdentifyGroup(m) eq <4,1> and m ne M then
I := m; // the cyclic group of order 4
end if;
end for;


//// The groups I and M are conjugate in S_12.

assert IsConjugate(S12,I,M);

//// Checking various relations among subgroups of G.

assert Gsubs ! I le Gsubs ! B and Gsubs ! I le Gsubs ! D; 
assert Gsubs ! M le Gsubs ! A and Gsubs ! M le Gsubs ! D;
assert Gsubs ! H le Gsubs ! C and Gsubs ! K le Gsubs ! C;


//// Properties of maximal subgroups used in Proposition 4.2.

//// The unique maximal subgroup of I is contained in C.

assert {J le Gsubs ! C : J in MaximalSubgroups(Gsubs ! I)} eq {true};

//// The maximal subgroups of B are H and I.

assert MaximalSubgroups(Gsubs ! B) eq {Gsubs ! H, Gsubs ! I};


//// Computing defining polynomials of fixed fields.

qA,_ := GaloisSubgroup(S, A);
qB,_ := GaloisSubgroup(S, B);
qC,_ := GaloisSubgroup(S, C);
qD,_ := GaloisSubgroup(S, D);
qH,_ := GaloisSubgroup(S, H);
qI,_ := GaloisSubgroup(S, I);
qK,_ := GaloisSubgroup(S, K);
qM,_ := GaloisSubgroup(S, M);


/*

For printing the above polynomials:

R := CoefficientRing(qA);
AssignNames(~R,["t"]);
R := Parent(qA);
AssignNames(~R,["x"]);
qA;
qB;
qC;
qD;
qH;
qI;
qK;
qM;

*/


//// Computing rational roots of discriminants.

Roots(Discriminant(Phi4));
Roots(Discriminant(qA));
Roots(Discriminant(qB));
Roots(Discriminant(qC));
Roots(Discriminant(qD));
Roots(Discriminant(qH));
Roots(Discriminant(qI));
Roots(Discriminant(qK));
Roots(Discriminant(qM));

/*

Output:

[ <0, 66>, <4, 66> ]
[ <0, 33>, <4, 3> ]
[ <0, 45>, <4, 5> ]
[ <0, 12>, <4, 2> ]
[ <0, 33>, <4, 3> ]
[ <0, 198>, <3/2, 4>, <4, 18> ]
[ <0, 165>, <3/2, 6>, <4, 15> ]
[ <0, 166>, <4, 16> ]
[ <0, 167>, <4, 17> ]

*/


//// *** Proof of Lemma 4.1 *** ////


//// Checking that q_A and q_B have the form x^2 - g(t)*f(t)^2.


fA := 3*t^16*(t - 4)*(t^2 - 3*t + 1)*(t^3 - 2*t^2 + 18*t - 54);
gA := 3*t*(4 - t);

assert qA eq x^2 - gA*fA^2;

fB := 9*t^22*(t - 4)^2*(t^2 - 3*t + 1)*(t^3 - 2*t^2 + 18*t - 54);
gB:= 15*t*(4 - t);

assert qB eq x^2 - gB*fB^2;


//// Using the form x^2 - g(t)f(t)^2 of q_A and q_B, we find
//// simpler equations for curves birational to Y_A and Y_B.

AA<t,x> := AffineSpace(Rationals(),2);
f := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(qA)]), x);
YA := Curve(AA, f);
f := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(qB)]), x);
YB := Curve(AA, f);

CA := Curve(AA, x^2 - 3*t*(4 - t));  // curve birational to YA
CB := Curve(AA, x^2 - 15*t*(4 - t)); // curve birational to YB

fA := 3*t^16*(t - 4)*(t^2 - 3*t + 1)*(t^3 - 2*t^2 + 18*t - 54);
CA_to_YA := map<CA->YA|[t,x*fA]>;

fB := 9*t^22*(t - 4)^2*(t^2 - 3*t + 1)*(t^3 - 2*t^2 + 18*t - 54);
CB_to_YB := map<CB->YB|[t,x*fB]>;


//// Checking that we have birational maps.

bool,_ := IsInvertible(CA_to_YA);
assert bool;
bool,_ := IsInvertible(CB_to_YB);
assert bool;


//// Parametrizing the curves C_A and C_B.

P1<v,w> := Curve(ProjectiveSpace(Rationals(),1));

XCA := ProjectiveClosure(CA);
CAmap := Parametrization(XCA, XCA ! [0,0,1] , P1);
CAmap := ImproveParametrization(CAmap);

XCB := ProjectiveClosure(CB);
CBmap := Parametrization(XCB, XCB ! [0,0,1] , P1);
CBmap := ImproveParametrization(CBmap);

DefiningPolynomials(CAmap);
DefiningPolynomials(CBmap);

/*

Output:

[
    -4*v^2,
    -12*v*w,
    -v^2 - 3*w^2
]

[
    -4*v^2,
    -60*v*w,
    -v^2 - 15*w^2
]

*/


//// Parametrizing the curves Y_A and Y_B.

A1<v> := AffineSpace(Rationals(),1);

alpha := 4*v^2/(v^2 + 3);
CAmap := map<A1->CA|[alpha,12*v/(v^2 + 3)]>;
Amap := CAmap*CA_to_YA; // a birational map A1 --> YA
bool, Amap_inverse := IsInvertible(Amap);
assert bool;
BasePoints(Amap);
BasePoints(Amap_inverse);

beta := 4*v^2/(v^2 + 15);
CBmap := map<A1->CB|[beta,60*v/(v^2 + 15)]>;
Bmap := CBmap*CB_to_YB; // a birational map A1 --> YB
bool, Bmap_inverse := IsInvertible(Bmap);
assert bool;
BasePoints(Bmap);
BasePoints(Bmap_inverse);

/*

Output:

{@ @}
{@ (0, 0), (4, 0) @}

{@ @}
{@ (0, 0), (4, 0) @}

*/


//// Finding all rational points on the curve Y_C.
//// The polynomial q_C is quadratic in x, so set y^2 = disc(q_C).

t := F.1;
assert Discriminant(qC) eq 45*(t - 4)^2*t^12;

//// Hence every rational point on Y_C has t-coordinate 0 or 4.


//// Parametrizing the curve Y_D.

AA<t,x> := AffineSpace(Rationals(),2);
f := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(qD)]), x);
YD := Curve(AA, f);
P1<v,w> := Curve(ProjectiveSpace(Rationals(),1));
XD := ProjectiveClosure(YD);
Dmap := Parametrization(XD, XD ! [2,256,1], P1);
Dmap := ImproveParametrization(Dmap);
DefiningPolynomials(Dmap);

/*

Output:

[
    -v^3*w^20 + 3*v*w^22 - 2*w^23,
    v^23 + v^22*w - 18*v^21*w^2 - 10*v^20*w^3 + 132*v^19*w^4 + 29*v^18*w^5 - 
        432*v^17*w^6 - 150*v^16*w^7 + 192*v^15*w^8 + 2275*v^14*w^9 + 
        2002*v^13*w^10 - 14238*v^12*w^11 + 1784*v^11*w^12 + 39255*v^10*w^13 - 
        35476*v^9*w^14 - 38610*v^8*w^15 + 80403*v^7*w^16 - 25176*v^6*w^17 - 
        46556*v^5*w^18 + 54544*v^4*w^19 - 23472*v^3*w^20 + 2816*v^2*w^21 + 
        960*v*w^22 - 256*w^23,
    -w^23
]

*/


//// Dehomogenizing to obtain a parametrization of Y_D.

A1<v> := AffineSpace(Rationals(),1);
delta := (v - 1)^2*(v + 2);
map2 := (1 - v)^11*(2 + v)^6*(4 + v + v^2)*(1 + 4*v - 4*v^2 - v^3 + v^4);
Dmap := map<A1->YD|[delta,map2]>;
bool, Dmap_inverse := IsInvertible(Dmap);
assert bool;
BasePoints(Dmap);
BasePoints(Dmap_inverse);

/*

{@ @}
{@ (0, 0), (4, -40960) @}

*/


//// Parametrizing the curve Y_I.
//// We use the parametrizations of Y_B and Y_D.

AA<x,y> := AffineSpace(Rationals(),2);
f := 4*x^2 - (x^2 + 15)*(y - 1)^2*(y + 2); // The equation beta(x) = delta(y)
Y := Curve(AA, f);
X := ProjectiveClosure(Y);

P1<v,w> := Curve(ProjectiveSpace(Rationals(),1));
map := Parametrization(X, X ! [0,-2,1], P1);
map := ImproveParametrization(map);
DefiningPolynomials(map);

/*

[
    -45*v^4*w + 90*v^3*w^2 - 180*v^2*w^3 + 135*v*w^4 + 180*w^5,
    -4*v^5 + 10*v^4*w + 50*v^3*w^2 - 85*v^2*w^3 - 125*v*w^4 + 77*w^5,
    2*v^5 - 5*v^4*w - 10*v^3*w^2 + 20*v^2*w^3 - 95*v*w^4 + 44*w^5
]

*/


//// Finding the second coordinate of a parametrization of Y_I.
//// We check that the polynomial q_I(iota(v),x) has roots in QQ(v).

k<v> := FunctionField(Rationals());
_<x> := PolynomialRing(k);

i := 45*(1 + v - v^2)/((2*v - 1)*(v^2 - v - 11));
t := 4*i^2/(i^2 + 15); // t is equal to beta(i), or iota(v).

fI := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(qI)]), x);
fI_roots := Roots(fI);
assert #fI_roots eq 2;


//// Choosing a root p of the above polynomial,
//// we have the parametrization (iota, p) of Y_I.


//// Confirming we have a parametrization of Y_I.

AA<t,x> := AffineSpace(Rationals(),2);

fI := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(qI)]), x);
YI := Curve(AA, fI);

A1<v> := AffineSpace(Rationals(),1);
p := Evaluate(fI_roots[1][1],v);

i := 45*(1 + v - v^2)/((2*v - 1)*(v^2 - v - 11));
iota := 4*i^2/(i^2 + 15);

Imap := map<A1->YI|[iota,p]>;
bool, Imap_inverse := IsInvertible(Imap);
assert bool;
BasePoints(Imap);

/*

Output:

{@ @}

*/


//// Parametrizing the curve Y_M.
//// We use the parametrizations of Y_A and Y_D.

AA<x,y> := AffineSpace(Rationals(),2);
f := 4*x^2 - (x^2 + 3)*(y - 1)^2*(y + 2);  // The equation alpha(x) = delta(y)
Y := Curve(AA, f);
X := ProjectiveClosure(Y);

P1<v,w> := Curve(ProjectiveSpace(Rationals(),1));
map := Parametrization(X, X ! [0,-2,1], P1);
map := ImproveParametrization(map);
DefiningPolynomials(map);

/*

[
    -9*v^4*w - 18*v^3*w^2 - 18*v^2*w^3 - 9*v*w^4,
    -4*v^5 - 10*v^4*w + 2*v^3*w^2 + 13*v^2*w^3 + v*w^4 - 2*w^5,
    2*v^5 + 5*v^4*w + 2*v^3*w^2 - 2*v^2*w^3 - 5*v*w^4 - 2*w^5
]

*/


//// Finding the second coordinate of a parametrization of Y_M.
//// We check that the polynomial q_M(mu(v),x) has roots in QQ(v).

k<v> := FunctionField(Rationals());
_<x> := PolynomialRing(k);

m := 9*v*(v + 1)/((v - 1)*(2 + v)*(2*v + 1));
t := 4*m^2/(m^2 + 3); // t is equal to alpha(m), or mu(v).

fM := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(qM)]), x);
fM_roots := Roots(fM);
assert #fM_roots eq 6;


//// Choosing a root p of the above polynomial,
//// we have the parametrization (mu, p) of Y_M.


//// Confirming we have a parametrization of Y_M.

AA<t,x> := AffineSpace(Rationals(),2);
fM := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(qM)]), x);
YM := Curve(AA, fM);

A1<v> := AffineSpace(Rationals(),1);
p := Evaluate(fM_roots[1][1],v);

m := 9*v*(v + 1)/((v - 1)*(2 + v)*(2*v + 1));
mu := 4*m^2/(m^2 + 3);

Mmap := map<A1->YM|[mu,p]>;
bool, Mmap_inverse := IsInvertible(Mmap);
assert bool;
BasePoints(Mmap);

/*

Output:

{@ @}

*/
