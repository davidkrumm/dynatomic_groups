
/* 
This file contains the code used for the calculations related to
the fourth dynatomic groups of maps with trivial automorphism group.
In particular, this includes code for Lemmas 4.3 and 4.5, and
Propositions 4.6, 4.7, 5.1(b), and 5.3(b).
*/


//// Computing the Galois group of Phi_4 and its lattice of subgroups.

F<t> := PolynomialRing(Rationals());
_<x> := PolynomialRing(F);

Phi4 := x^12 + (-3*t + 6)*x^11 + (4*t^2 - 16*t + 24)*x^10 + (-3*t^3 + 20*t^2 - 55*t +
    62)*x^9 + (t^4 - 21*t^3 + 19*t^2 - 222*t + 72)*x^8 + (11*t^4 - 35*t^3 -
    14*t^2 - 660*t + 72)*x^7 + (54*t^4 + 142*t^3 + 413*t^2 - 684*t + 852)*x^6 +
    (153*t^4 + 825*t^3 + 2422*t^2 + 1596*t + 3672)*x^5 + (272*t^4 + 1881*t^3 +
    5854*t^2 + 6300*t + 7560)*x^4 + (309*t^4 + 2409*t^3 + 7754*t^2 + 9228*t +
    8744)*x^3 + (218*t^4 + 1806*t^3 + 5884*t^2 + 7080*t + 5808)*x^2 + (87*t^4 +
    740*t^3 + 2400*t^2 + 2800*t + 2064)*x + 15*t^4 + 128*t^3 + 408*t^2 + 448*t +
    304;

// Discriminant(Phi4) eq 5184*(t + 6)^44*(t^2 + t + 5/4)^3*(t^2 + 22/3*t + 17)^4;

G,_,S := GaloisGroup(Phi4);

Gsubs := SubgroupLattice(G); // The poset of conjugacy classes of subgroups of G

//// Checking that G is isomorphic to the appropriate wreath product.

W := WreathProduct(CyclicGroup(4),Sym(3));
IsConjugate(Sym(12),G,W);


/*
The following function determines whether the given 
permutation group H has an element with cycle structure s.
*/

HasCycleStructure := function(H, s)
for h in H do
if CycleStructure(h) eq s then
return true;
end if;
end for;
return false;
end function;


//// Labeling the maximal subgroups of G.

for i in MaximalSubgroups(Gsubs ! G) do
m := Group(i);
if IdentifyGroup(m) eq <192,944> then
M1 := m;
elif Order(m) eq 128 then
M2 := m;
elif Order(m) eq 96 then
M3 := m;
elif IdentifyGroup(m) eq <192,188> then
M4 := m;
elif IdentifyGroup(m) eq <192,182> then
M5 := m;
end if;
end for;

m1,_ := GaloisSubgroup(S, M1);
m2,_ := GaloisSubgroup(S, M2);
m3,_ := GaloisSubgroup(S, M3);
m4,_ := GaloisSubgroup(S, M4);
m5,_ := GaloisSubgroup(S, M5);


//// Labeling the Maximal subgroups of M1.

for i in MaximalSubgroups(Gsubs ! M1) do
m := Group(i);
if Order(m) eq 48 then
A1 := m;
elif
Order(m) eq 64 then
A2 := m;
elif IdentifyGroup(m) eq <96,68> then
A3 := m;
elif IdentifyGroup(m) eq <96,64> and HasCycleStructure(m,[<2,6>]) then
A4 := m;
elif IdentifyGroup(m) eq <96,64> and not HasCycleStructure(m,[<2,6>]) then
A5 := m;
end if;
end for;

a1,_ := GaloisSubgroup(S, A1);
a2,_ := GaloisSubgroup(S, A2);
a3,_ := GaloisSubgroup(S, A3);
a4,_ := GaloisSubgroup(S, A4);
a5,_ := GaloisSubgroup(S, A5);


//// Labeling the maximal subgroups of M2.

for i in MaximalSubgroups(Gsubs ! M2) do
m := Group(i);
if IdentifyGroup(m) eq <64,101> and not HasCycleStructure(m,[<8,1>,<4,1>]) then
B1 := m; 
elif IdentifyGroup(m) eq <64,198> then
B2 := m;
elif IdentifyGroup(m) eq <64,85> then
B3 := m;
elif IdentifyGroup(m) eq <64,20> and not HasCycleStructure(m,[<8,1>,<4,1>]) then
B4 := m;
elif IdentifyGroup(m) eq <64,55> then
B5 := m;
elif IdentifyGroup(m) eq <64,20> and HasCycleStructure(m,[<8,1>,<4,1>]) then
B6 := m;
elif IdentifyGroup(m) eq <64,101> and HasCycleStructure(m,[<8,1>,<4,1>]) then
B7 := m;
end if;
end for;

b1,_ := GaloisSubgroup(S, B1);
b2,_ := GaloisSubgroup(S, B2);
b3,_ := GaloisSubgroup(S, B3);
b4,_ := GaloisSubgroup(S, B4);
b5,_ := GaloisSubgroup(S, B5);
b6,_ := GaloisSubgroup(S, B6);
b7,_ := GaloisSubgroup(S, B7);


//// Labeling two maximal subgroups of M3.

for i in MaximalSubgroups(Gsubs ! M3) do
m := Group(i);
if Order(m) eq 24 then
i;
C1 := m;
elif Order(m) eq 32 then
i;
C2 := m;
end if;
end for;

c1,_ := GaloisSubgroup(S, C1);
c2,_ := GaloisSubgroup(S, C2);


//// Labeling one maximal subgroup of B1.

for i in MaximalSubgroups(Gsubs ! B1) do
m := Group(i);
if IdentifyGroup(m) eq <32,11> and not HasCycleStructure(m,[<8,1>,<2,2>]) and not HasCycleStructure(m,[<2,6>]) then
i;
J := m; 
end if;
end for;

qJ,_ := GaloisSubgroup(S, J);


//// Labeling one maximal subgroup of B2.

for i in MaximalSubgroups(Gsubs ! B2) do
m := Group(i);
if IdentifyGroup(m) eq <32, 25> and HasCycleStructure(m,[<4, 1>, <2, 2>, <1, 4>]) and HasCycleStructure(m,[<4, 1>, <1, 8>]) then
i;
K := m;
end if;
end for;

qK := GaloisSubgroup(S, K);


//// Computing rational roots of discriminants.

Roots(Discriminant(Phi4));
Roots(Discriminant(m1));
Roots(Discriminant(m2));
Roots(Discriminant(m3));
Roots(Discriminant(m4));
Roots(Discriminant(m5));
Roots(Discriminant(a1));
Roots(Discriminant(a2));
Roots(Discriminant(a3));
Roots(Discriminant(a4));
Roots(Discriminant(a5));
Roots(Discriminant(b1));
Roots(Discriminant(b2));
Roots(Discriminant(b3));
Roots(Discriminant(b4));
Roots(Discriminant(b5));
Roots(Discriminant(b6));
Roots(Discriminant(b7));
Roots(Discriminant(qJ));
Roots(Discriminant(qK));

/*

Output:

[ <-6, 44> ]
[ <-6, 2> ]
[ <-19/3, 2>, <-6, 2> ]
[ <-6, 8>, <-1, 6> ]
[ <-19/3, 2>, <-6, 2> ]
[ <-19/3, 2>, <-6, 4> ]
[ <-6, 20>, <-1, 12> ]
[ <-19/3, 4>, <-6, 14> ]
[ <-19/3, 4>, <-6, 12> ]
[ <-19/3, 12>, <-6, 24>, <-1/2, 4> ]
[ <-6, 12>, <-1/2, 4> ]
[ <-6, 10> ]
[ <-6, 20>, <-1, 12> ]
[ <-19/3, 2>, <-6, 34> ]
[ <-19/3, 6>, <-6, 40>, <-5, 8> ]
[ <-19/3, 6>, <-6, 10>, <-5, 8> ]
[ <-19/3, 2>, <-6, 20> ]
[ <-19/3, 4>, <-6, 14> ]
[ <-6, 44> ]
[ <-6, 44>, <-1, 6> ]

*/


//// For printing any of the above defining polynomials of fixed fields.

/*

R := CoefficientRing(m1);
AssignNames(~R,["t"]);
R := Parent(m1);
AssignNames(~R,["x"]);

m1;
m2;
m3;
m4;
m5;

a1;
a2;
a3;
a4;
a5;

b1;
b2;
b3;
b4;
b5;
b6;
b7;

c1;
c2;

qJ;
qK;

*/


//// *** What follows is the proof of Lemma 4.3 in the paper. *** ////


//// The curve Y_M4 is birational to a conic with no rational point.

AA<t,x> := AffineSpace(Rationals(),2);
f := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(m4)]), x);
YM4 := Curve(AA, f);
conic, M4map := Conic(ProjectiveClosure(YM4));
conic;
BasePoints(M4map);
HasRationalPoint(conic);

/*

Output:

Conic over Rational Field defined by
$.1^2 + 27*$.2^2 + 198*$.2*$.3 + 459*$.3^2

{@ (-19/3 : 0 : 1), (-6 : 0 : 1), (0 : 1 : 0) @}

false

*/

//// Hence (-19/3,0) and (-6,0) are the only rational points on Y_M4.



//// The curve Y_A5 is birational to a conic with no rational point.

AA<t,x> := AffineSpace(Rationals(),2);
f := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(a5)]), x);
YA5 := Curve(AA, f);
conic, A5map := Conic(ProjectiveClosure(YA5));
conic;
BasePoints(A5map);
HasRationalPoint(conic);

/*

Output:

Conic over Rational Field defined by $.1^2 + 4*$.2^2 + 4*$.3^2

{@ (-6 : 0 : 1), (0 : 1 : 0) @}

false

*/

//// Hence (-6,0) is the only rational point on Y_A5.


//// The curve Y_J is birational to a conic with no rational point.

AA<t,x> := AffineSpace(Rationals(),2);
f := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(qJ)]), x);
YJ := Curve(AA, f);
conic, Jmap := Conic(ProjectiveClosure(YJ));
conic;
BasePoints(Jmap);
HasRationalPoint(conic);

/*

Output:

Conic over Rational Field defined by
$.1^2 - 71/6*$.1*$.2 + 439/12*$.2^2 - 71/6*$.1*$.3 + 821/12*$.2*$.3 + 437/12*$.3^2

{@ (-6 : 2 : 1), (-1 : 1 : 0), (1 : 0 : 0) @}

false

*/


//// Hence (-6,2) is the only rational point on Y_J.


//// The curve Y_M5 is elliptic of rank 0 over a quadratic field.

AA<t,x> := AffineSpace(Rationals(),2);
f := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(m5)]), x);
YM5 := Curve(AA, f);
QF<i> := QuadraticField(-1);
YM5 := ChangeRing(YM5, QF);
XM5 := ProjectiveClosure(YM5);
E, M5map := EllipticCurve(XM5, XM5 ! [i - 1/2,0,1]);
Rank(E);

/*

Output:

0 true

*/


//// Finding all Q(i)-rational points on Y_M5.

XM5_pts := BasePoints(M5map);
T, Tmap := TorsionSubgroup(E);
Epts := [Tmap(y): y in T];
for pt in Epts do
XM5_pts := XM5_pts join Points(Pullback(M5map, pt));
end for;
XM5_pts;

/*

Output:

{@ (-19/3 : 0 : 1), (-6 : 0 : 1), (1/2*(-2*i - 1) : 0 : 1), (0 : 1 : 0), 
(1/2*(2*i - 1) : 0 : 1) @}

*/


//// Hence every rational point on Y_M5 has t-coordinate -6 or -19/3.


//// The curve Y_B6 is elliptic of rank 0 over a quadratic field.

AA<t,x> := AffineSpace(Rationals(),2);
f := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(b6)]), x);
YB6 := Curve(AA, f);
QF<i> := QuadraticField(-1);
YB6 := ChangeRing(YB6, QF);
XB6 := ProjectiveClosure(YB6);
E, B6map := EllipticCurve(XB6, XB6 ! [i - 1/2,0,1]);
Rank(E);

/*

Output:

0 true

*/


//// Finding all Q(i)-rational points on Y_B6.

XB6_pts := BasePoints(B6map);
T, Tmap := TorsionSubgroup(E);
Epts := [Tmap(y): y in T];
for pt in Epts do
XB6_pts := XB6_pts join Points(Pullback(B6map, pt));
end for;
XB6_pts;

/*

Output:

{@ (-19/3 : 0 : 1), (-6 : 0 : 1), (1/2*(-2*i - 1) : 0 : 1), (1/2*(2*i - 1) : 0 :
1), (0 : 1 : 0), (2*i - 4 : -18*i + 4 : 1), (-2*i - 4 : -18*i - 4 : 1), (-2*i - 
    4 : 18*i + 4 : 1), (2*i - 4 : 18*i - 4 : 1) @}

*/

//// Hence every rational point on Y_B6 has t-coordinate -6 or -19/3.


//// The curve Y_A2 has genus 2 and Mordell-Weil rank 1.

AA<t,x> := AffineSpace(Rationals(),2);
f := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(a2)]), x);
YA2 := Curve(AA, f);
_,XA2,map1 := IsHyperelliptic(YA2);
X,map2 := SimplifiedModel(XA2);
X;
JX := Jacobian(X);
RankBounds(JX);

/*

Output:

Hyperelliptic Curve defined by y^2 = 4*x^6 - 20*x^5 + 9*x^4 + 22*x^3 + 127*x^2 + 98*x + 85 over Rational Field

1 1

*/


//// Applying Chabauty-Coleman to find all rational points on Y_A2.

P := JX ! [X![1,-2,0],X![1,2,0]];
Order(P); // 0 indicates infinite order
Xpts := Chabauty(P); // all rational points on X
YA2_pts := BasePoints(map1);
A2map := map1*map2;
for pt in Xpts do
YA2_pts := YA2_pts join Points(Pullback(A2map, pt));
end for;
YA2_pts;

/*

Output:

0

{@ (-6, 16) @}

*/


//// Hence (-6,16) is the only rational point on Y_A2.


//// The curve Y_A4 has genus 2 and Mordell-Weil rank 0.

AA<t,x> := AffineSpace(Rationals(),2);
f := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(a4)]), x);
YA4 := Curve(AA, f);
_,XA4,map1 := IsHyperelliptic(YA4);
X,map2 := SimplifiedModel(XA4);
JX := Jacobian(X);
RankBound(JX);
Chabauty0(JX);
BasePoints(map1);

/*

Output:

0

{@ @}

{@ (-19/3, 0), (-6, 0) @}

*/

//// Hence every rational point on Y_A4 has t-coordinate -6 or -19/3.


//// The curve Y_B7 has genus 2 and Mordell-Weil rank 1.

AA<t,x> := AffineSpace(Rationals(),2);
f := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(b7)]), x);
YB7 := Curve(AA, f);
_,XB7,map1 := IsHyperelliptic(YB7);
X,map2 := SimplifiedModel(XB7);
X;
JX := Jacobian(X);
RankBounds(JX);

/*

Output:

Hyperelliptic Curve defined by y^2 = 4*x^6 - 20*x^5 + 9*x^4 + 22*x^3 + 127*x^2 + 98*x + 85 over Rational Field

1 1

*/


//// Applying Chabauty-Coleman to find all rational points on Y_B7.

P := JX ! [X![1,-2,0],X![1,2,0]];
Order(P);
Xpts := Chabauty(P);
YB7_pts := BasePoints(map1);
B7map := map1*map2;
for pt in Xpts do
YB7_pts := YB7_pts join Points(Pullback(B7map, pt));
end for;
YB7_pts;

/*

Output:

0

{@ (-6, 16) @}

*/

//// Hence (-6,16) is the only rational point on Y_B7.


//// The curve Y_K has genus 2 and Mordell-Weil rank 1.

AA<t,x> := AffineSpace(Rationals(),2);
f := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(qK)]), x);
YK := Curve(AA, f);
time _,XK,map1 := IsHyperelliptic(YK); // long computation
X,map2 := SimplifiedModel(XK);
X;
JX := Jacobian(X);
RankBounds(JX);

/*

Output:

Time: 345.390

Hyperelliptic Curve defined by y^2 = x^6 - 8*x^4 + 6*x^3 - 8*x^2 + 1 over 
Rational Field

1 1

*/


//// Applying Chabauty-Coleman to find all rational points on Y_K.

P := JX ! [X![1,1,0],X![1,-1,0]];
Order(P);
Xpts := Chabauty(P);
YK_pts := BasePoints(map1);
Kmap := map1*map2;
for pt in Xpts do
YK_pts := YK_pts join Points(Pullback(Kmap,pt));
end for;
YK_pts;

/*

Output:

0

{@ (-6, 8), (-10/3, 8/3), (-10/3, 22/3) @}

*/


//// Hence every rational point on Y_K has t-coordinate -6 or -10/3.


//// The curve Y_B3 is birational to a genus-2 curve with no rational point.

AA<t,x> := AffineSpace(Rationals(),2);
f := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(b3)]), x);
YB3 := Curve(AA, f);
_,XB3,map := IsHyperelliptic(YB3);
X := SimplifiedModel(XB3);
X;
_<x> := PolynomialRing(Rationals());
HasPointsEverywhereLocally(-3*x^6 + 14*x^5 - x^4 - 22*x^3 - 103*x^2 - 92*x - 68,2);
BasePoints(map);

/*

Output:

Hyperelliptic Curve defined by y^2 = -3*x^6 + 14*x^5 - x^4 - 22*x^3 - 103*x^2 - 92*x - 68 over Rational Field

false

{@ (-19/3, 0), (-6, 0) @}

*/


//// Hence every rational point on Y_B3 has t-coordinate -19/3 or -6.


//// The curve Y_B4 is birational to a hyperelliptic genus-3 curve with no rational point.

AA<t,x> := AffineSpace(Rationals(),2);
f := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(b4)]), x);
YB4 := Curve(AA, f);
_,XB4,map := IsHyperelliptic(YB4);
X := SimplifiedModel(XB4);
X;
_<x> := PolynomialRing(Rationals());
HasPointsEverywhereLocally(-12*x^8 + 44*x^7 + 37*x^6 - 22*x^5 - 505*x^4 - 890*x^3 - 1155*x^2 - 732*x - 340,2);
BasePoints(map);

/*

Output:

Hyperelliptic Curve defined by y^2 = -12*x^8 + 44*x^7 + 37*x^6 - 22*x^5 - 505*x^4 - 890*x^3 - 1155*x^2 - 732*x - 340 over Rational Field

false

{@ (-19/3, 0), (-6, 0) @}

*/

//// Hence every rational point on Y_B4 has t-coordinate -19/3 or -6.



//// The curve Y_A3 maps to a hyperelliptic curve of genus 1 with no rational point.

//// The polynomial a_3 is quadratic in x^2, equal to f(t,x^2) with f as below.

k<t> := PolynomialRing(Rationals());
_<x> := PolynomialRing(k);

f := x^2 + (54*t^6 + 1728*t^5 + 22996*t^4 + 163488*t^3 + 658172*t^2 + 1431888*t + 
    1325232)*x + 729*t^12 + 46656*t^11 + 1367820*t^10 + 24302160*t^9 + 
    291613300*t^8 + 2491510624*t^7 + 15554745824*t^6 + 71564872832*t^5 + 
    241077431104*t^4 + 580573833216*t^3 + 950034852864*t^2 + 949848367104*t + 
    439537176576;

Discriminant(f) eq -16*(6 + t)^4*(19 + 3*t)^2*(51 + 22*t + 3*t^2)*(5 + 4*t + 4*t^2);

HasPointsEverywhereLocally(-(51 + 22*t + 3*t^2)*(5 + 4*t + 4*t^2),2);

/*

Output:

true

false

*/


//// Hence every rational point on Y_A3 has t-coordinate -6 or -19/3.



//// *** This completes the calculations for Lemma 4.3. *** ////



//// Checking relations among subgroups of G used in the proof of Lemma 4.4.


//// B_5 is contained in a conjugate of M_4.

Gsubs ! B5 le Gsubs ! M4;

//// The two maximal subgroups of M3 different from
//// C1,C2, and A1 are contained in either M4 or M5.

for i in MaximalSubgroups(Gsubs ! M3) do
if i notin {Gsubs ! C1, Gsubs ! C2, Gsubs ! A1} then
i le Gsubs ! M4 or i le Gsubs ! M5;
end if;
end for;



//// *** What follows is the proof of Lemma 4.5 in the paper. *** ////


//// The set denoted \mathcal{F} in the paper.

RuledOut := {M4,M5,A2,A3,A4,A5,B3,B4,B6,B7,J};

/*
The following function determines if the subgroup H of G is
contained in a G-conjugate of one of the RuledOut groups.
*/

IsInRuledOutGroup := function(H)
for gp in RuledOut do
if Gsubs ! H le Gsubs ! gp then
return true;
end if;
end for; 
return false;
end function;

//// Finding all maximal subgroups of A_1 that are not
//// contained in a conjugate of one of the RuledOut groups.

A1_possible_subs := {};
for i in MaximalSubgroups(Gsubs ! A1) do
m := Group(i);
if not IsInRuledOutGroup(m) then
Include(~A1_possible_subs,m);
end if;
end for;

//// There is only one group in A1_possible_subs,
//// namely the group denoted \tilde{A_1} in the paper.

#A1_possible_subs eq 1;

//// Checking that every maximal subgroup of \tilde{A_1} is
//// contained in a conjugate of one of the RuledOut groups.

for H in A1_possible_subs do
for i in MaximalSubgroups(Gsubs ! H) do
m := Group(i);
IsInRuledOutGroup(m);
end for;
end for;

/*

Output:

true
true
true
true

*/


//// Finding all maximal subgroups of B_1 that are not
//// contained in a conjugate of one of the RuledOut groups.

B1_possible_subs := {}; // the set denoted \mathfrak{b}_1 in the paper.
for i in MaximalSubgroups(Gsubs ! B1) do
m := Group(i);
if not IsInRuledOutGroup(m) then
Include(~B1_possible_subs,m);
end if;
end for;

#B1_possible_subs eq 3;

//// Checking that every maximal subgroup of every
//// group in B1_possible_subs is contained in a
//// conjugate of one of the RuledOut groups.

for H in B1_possible_subs do
for i in MaximalSubgroups(Gsubs ! H) do
m := Group(i);
IsInRuledOutGroup(m);
end for;
end for;

/*

Output:

true
true
true
true
true
true
true
true
true

*/


RuledOutExtended := RuledOut join {K};

IsInRuledOutExtGroup := function(H)
for gp in RuledOutExtended do
if Gsubs ! H le Gsubs ! gp then
return true;
end if;
end for; 
return false;
end function;

//// Finding all maximal subgroups of B_2 that are not contained
//// in a conjugate of one of the RuledOutExtended groups.

B2_subs_level1 := {};
for i in MaximalSubgroups(Gsubs ! B2) do
m := Group(i);
if not IsInRuledOutExtGroup(m) then
Include(~B2_subs_level1,m);
end if;
end for;

//// For every group H in B2_subs_level1,find all maximal subgroups of H that
//// are not contained in a conjugate of one of the RuledOutExtended groups.

B2_subs_level2 := {};
for H in B2_subs_level1 do
for i in MaximalSubgroups(Gsubs ! H) do
m := Group(i);
if not IsInRuledOutExtGroup(m) then
Include(~B2_subs_level2,m);
end if;
end for;
end for;

//// Repeat the procedure for the maximal subgroups
//// of each of the groups in B2_subs_level2.

B2_subs_level3 := {};
for H in B2_subs_level2 do
for i in MaximalSubgroups(Gsubs ! H) do
m := Group(i);
if not IsInRuledOutExtGroup(m) then
Include(~B2_subs_level3,m);
end if;
end for;
end for;

//// Checking that every maximal subgroup of every
//// group in B2_subs_level3 is contained in a
//// conjugate of one of the RuledOutExtended groups.

for H in B2_subs_level3 do
for i in MaximalSubgroups(Gsubs ! H) do
m := Group(i);
IsInRuledOutExtGroup(m);
end for;
end for;

/*

Output:

true
true
true
true
true
true

*/


//// Collecting the above subgroups of B_2 at
//// levels 1, 2, and 3. This forms the set
//// denoted \mathfrak{b}_2 in the paper.

B2_possible_subs := B2_subs_level1 join B2_subs_level2 join B2_subs_level3;

#B2_possible_subs eq 13;

C2 in B2_possible_subs;


//// Every maximal subgroup of C_1 can either be ruled out
//// or belongs to B2_possible_subs or A1_possible_subs.

for i in MaximalSubgroups(Gsubs ! C1) do
m := Group(i);
IsInRuledOutGroup(m) or m in B2_possible_subs join A1_possible_subs;
end for;


//// *** This completes the calculations for Lemma 4.5. *** ////



//// *** Proof of Proposition 4.6 in the paper. *** ////


Pinfty := {W,M1,M2,M3,A1,B1,B2};

P0 := A1_possible_subs join B1_possible_subs join B2_possible_subs join {C1,K};

possible_groups := Pinfty join P0; // the set denoted \mathcal{P} in the paper.

#possible_groups eq 26;

_<x> := PolynomialRing(Rationals());

for r in [-19/3,-5,-10/3,-1,-1/2] do
Phi4r := x^12 + (-3*r + 6)*x^11 + (4*r^2 - 16*r + 24)*x^10 + (-3*r^3 + 20*r^2 - 55*r +
    62)*x^9 + (r^4 - 21*r^3 + 19*r^2 - 222*r + 72)*x^8 + (11*r^4 - 35*r^3 -
    14*r^2 - 660*r + 72)*x^7 + (54*r^4 + 142*r^3 + 413*r^2 - 684*r + 852)*x^6 +
    (153*r^4 + 825*r^3 + 2422*r^2 + 1596*r + 3672)*x^5 + (272*r^4 + 1881*r^3 +
    5854*r^2 + 6300*r + 7560)*x^4 + (309*r^4 + 2409*r^3 + 7754*r^2 + 9228*r +
    8744)*x^3 + (218*r^4 + 1806*r^3 + 5884*r^2 + 7080*r + 5808)*x^2 + (87*r^4 +
    740*r^3 + 2400*r^2 + 2800*r + 2064)*x + 15*r^4 + 128*r^3 + 408*r^2 + 448*r +
    304;
G4r := GaloisGroup(Phi4r);
for H in possible_groups do
if IsConjugate(Sym(12),G4r,H) then
r, H;
end if;
end for;
end for;

/*

Output:

-19/3 Permutation group M2

-5 Permutation group M2

-10/3 Permutation group K

-1 Permutation group C1

-1/2 Permutation group M1

*/



//// *** Proof that Y_H(Q) is infinite for H in Pinfty. *** ////

//// Note: this is not used in the paper.

////  Parametrizing the curves Y_M1 and Y_M2.

AA<t,x> := AffineSpace(Rationals(),2);
f := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(m1)]), x);
YM1 := Curve(AA, f);
XM1 := ProjectiveClosure(YM1);
P1<v,w> := Curve(ProjectiveSpace(Rationals(),1));
M1map := Parametrization(XM1, XM1 ! [-1/2,-11,1], P1);
M1map := ImproveParametrization(M1map);
DefiningPolynomials(M1map);

f := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(m2)]), x);
YM2 := Curve(AA, f);
XM2 := ProjectiveClosure(YM2);
P1<v,w> := Curve(ProjectiveSpace(Rationals(),1));
M2map := Parametrization(XM2, XM2 ! [-5,7,1], P1);
M2map := ImproveParametrization(M2map);
DefiningPolynomials(M2map);

/*

Output:

[
    v^3*w - v^2*w^2 - v*w^3,
    v^4 + 11*v^3*w + 11*v*w^3 - w^4,
    2*v^2*w^2
]

[
    v^3 + 3*v^2*w - 3*v*w^2 + 5*w^3,
    -6*v^2*w + 5*v*w^2 - 7*w^3,
    -v^2*w + v*w^2 - w^3
]

*/

//// Dehomogenizing to obtain parametrizations of Y_M1, Y_M2.

A1<v> := AffineSpace(Rationals(),1);
mu1 := (v^2 - v - 1)/(2*v);
M1map := map<A1->YM1|[mu1,(1 + v^2)*(v^2 + 11*v - 1)/(2*v^2)]>;
bool, M1map_inverse := IsInvertible(M1map);
bool;
BasePoints(M1map);
BasePoints(M1map_inverse);

mu2 := -(v^3 + 3*v^2 - 3*v + 5)/(v^2 - v + 1);
M2map := map<A1->YM2|[mu2,(6*v^2 - 5*v + 7)/(v^2 - v + 1)]>;
bool, M2map_inverse := IsInvertible(M2map);
bool;
BasePoints(M2map);
BasePoints(M2map_inverse);


/*

Output:

true
{@ (0) @}
{@ (-6, 0) @}

true
{@ @}
{@ (-19/3, 7), (-19/3, 9) @}

*/


//// Parametrizing the curve Y_B1.

AA<t,x> := AffineSpace(Rationals(),2);
f := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(b1)]), x);
YB1 := Curve(AA, f);
XB1 := ProjectiveClosure(YB1);
P1<v,w> := Curve(ProjectiveSpace(Rationals(),1));
B1map := Parametrization(XB1, XB1 ! [-35/6, 10/3,1], P1);
B1map := ImproveParametrization(B1map);
DefiningPolynomials(B1map);

/*

Output:

[
    v^6 - 9*v^5*w - 17*v^3*w^3 - 9*v*w^5 - w^6,
    4*v^5*w - 4*v^4*w^2 + 12*v^3*w^3 + 8*v*w^5,
    2*v^5*w + 2*v^3*w^3 + 2*v*w^5
]

*/

//// Dehomogenizing to obtain a parametrizations of Y_B1.

A1<v> := AffineSpace(Rationals(),1);
beta1 := (v^6 - 9*v^5 - 17*v^3 - 9*v - 1)/(2*v*(v^2 - v + 1)*(v^2 + v + 1));
B1map := map<A1->YB1|[beta1,(4*v*(v^4 - v^3 + 3*v^2 + 2))/(2*v*(v^2 - v + 1)*(v^2 + v + 1))]>;
bool, B1map_inverse := IsInvertible(B1map);
bool;
BasePoints(B1map);
BasePoints(B1map_inverse);

/*

Output:

true
{@ (0) @}
{@ (-6, 4) @}

*/


//// The curve Y_A1 is elliptic of rank 1.

AA<t,x> := AffineSpace(Rationals(),2);
f := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(a1)]), x);
YA1 := Curve(AA, f);
XA1 := ProjectiveClosure(YA1);
E, A1map := EllipticCurve(XA1, XA1 ! [-11/6,7,1]);
Rank(E);
CremonaReference(E);

/*

Output:

1 true
170a1

*/


//// The curve Y_B2 is elliptic of rank 1.

AA<t,x> := AffineSpace(Rationals(),2);
f := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(b2)]), x);
YB2 := Curve(AA, f);
XB2 := ProjectiveClosure(YB2);
E, B2map := EllipticCurve(XB2, XB2 ! [-10/3,-20/3,1]);
Rank(E);
CremonaReference(E);

/*

Output:

1 true
170a1

*/


//// The curve Y_M3 is elliptic of rank 1.

AA<t,x> := AffineSpace(Rationals(),2);
f := Evaluate(Polynomial([Evaluate(c, t) : c in Coefficients(m3)]), x);
YM3 := Curve(AA, f);
XM3 := ProjectiveClosure(YM3);
E, M3map := EllipticCurve(XM3, XM3 ! [0,1,0]);
Rank(E);
CremonaReference(E);

/*

Output:

1 true
170a2

*/


//// *** Proof of Proposition 4.7 in the paper. *** ////


//// The following function attempts to realize
//// a given group H in the form G_{4,r}.

RealizeGroup := function(H,height_bound)
qH := GaloisSubgroup(S, H);
AA := AffineSpace(Rationals(),2);
f := Evaluate(Polynomial([Evaluate(F ! c, AA.1) : c in Coefficients(qH)]), AA.2);
YH := Curve(AA, f);
test_values := {@ p[1] : p in PointSearch(YH,height_bound) @};
realizations := {};
_<x> := PolynomialRing(Rationals());

for r in test_values do
Phi4r := x^12 + (-3*r + 6)*x^11 + (4*r^2 - 16*r + 24)*x^10 + (-3*r^3 + 20*r^2 - 55*r +
    62)*x^9 + (r^4 - 21*r^3 + 19*r^2 - 222*r + 72)*x^8 + (11*r^4 - 35*r^3 -
    14*r^2 - 660*r + 72)*x^7 + (54*r^4 + 142*r^3 + 413*r^2 - 684*r + 852)*x^6 +
    (153*r^4 + 825*r^3 + 2422*r^2 + 1596*r + 3672)*x^5 + (272*r^4 + 1881*r^3 +
    5854*r^2 + 6300*r + 7560)*x^4 + (309*r^4 + 2409*r^3 + 7754*r^2 + 9228*r +
    8744)*x^3 + (218*r^4 + 1806*r^3 + 5884*r^2 + 7080*r + 5808)*x^2 + (87*r^4 +
    740*r^3 + 2400*r^2 + 2800*r + 2064)*x + 15*r^4 + 128*r^3 + 408*r^2 + 448*r +
    304;
G4r := GaloisGroup(Phi4r);
if IsConjugate(Sym(12),G4r,H) then
Include(~realizations, r);
end if;
end for;
return realizations;
end function;

for H in [M3,A1,B1,B2] do
RealizeGroup(H,100);
end for;
RealizeGroup(C2,10^4);

/*

Output:

{ 3/2 }
{ -11/6 }
{ -35/6 }
{ -15/7 }
{ -1/21 }

*/


//// *** Proof of Proposition 5.1(b) in the paper. *** ////

//// Computing indices of stabilizers.

degrees := {};
for H in possible_groups do
degrees := degrees join {Index(H,Stabilizer(H,i)) : i in [1..12]};
end for;
degrees;

/*

Output:

{ 2, 4, 6, 8, 12 }

*/


//// *** Proof of Proposition 5.3(b) in the paper. *** ////

/*
Given the Galois group of a polynomial F with rational coefficients,
this function computes the density of the set of primes p such that 
F has a root in the p-adic field Q_p.
*/

Density := function(GG);
stabilizer_union := {};
for i := 1 to #GSet(GG) do
stabilizer_union := stabilizer_union join ElementSet(GG, Stabilizer(GG, i));
end for;
return #stabilizer_union/#GG;
end function;

possible_densities := {Density(GG): GG in possible_groups};

possible_densities;
#possible_densities;
Maximum(possible_densities);

/*

Output:

{ 1/6, 19/96, 85/384, 43/192, 1/4, 5/16, 1/3, 11/32, 25/64, 19/48, 13/32, 
53/128, 1/2, 17/32, 39/64, 5/8 }

16

5/8

*/

//// Densities for the groups known to be realized.

realizable_densities := {Density(GG): GG in Pinfty join {C1,C2,K}};
#realizable_densities;
Maximum(realizable_densities);

/*

Output:

{ 1/6, 19/96, 85/384, 43/192, 11/32, 25/64, 19/48, 53/128, 17/32, 39/64 }

10

39/64

*/
